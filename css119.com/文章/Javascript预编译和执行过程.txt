javascript预编译和执行过程
1. 在执行前会进行类似“预编译”的操作：首先会创建一个当前执行环境下的活动对象，并将那些用
var申明的变量设置为活动对象的属性，但是此时这些变量的赋值都是undefined;
以function定义的函数也添加为活动对象的属性，而且它们的值正是函数的定义。
2.在解释执行阶段，遇到变量需要解析时，会首先从当前执行环境的活动对象中查找，如果没有找到而且该执行环境的拥有者有prototype属性时则会从prototype链中查找，否则将会按照作用域链查找。
遇到var a = …这样的语句时会给相应的变量进行赋值（注意：变量的赋值是在解释执行阶段完成的，如
果在这之前使用变量，它的值会是undefined）
用var定义的变量和function定义的方法在预编译的过程中有所不同，用代码来看看:
function mm(){ }
这种形式是声明一个函数，跟 var 一个变量的机制一样，脚本在解释执行之前会做预编译处理，而
var mm = function(){ }
这种形式是对一个变量赋值，虽然也做预编译，但仅仅只是给 mm 事先变量分配一个内存空间，而没有
做初始化
<script type=”text/javascript”>
window.alert(mm);
function mm(){
}
</script>
以上代码你会看到能alert出来mm的内容，但alert却是在function声明之前的，验证了脚本宿主在执行
之前对脚本做了预编译处理
<script type=”text/javascript”>
window.alert(mm);
var mm = 123;
</script>
以上代码你会看到alert出一个undefined来，说明脚本宿主在执行之前对脚本做了预编译：对mm分配内
存空间但并不初始化它
<script type=”text/javascript”>
window.alert(nn);
window.alert(aa);
if(true){
function mm(){ }
var aa = 1;
}else{
function nn(){ }
var aa = 2;
}
</script>
以上代码再次验证了预编译，并且说明预编译与条件无关(不要用firebug测试，它又bug，用chrome测试)。先弹出nn的函数定义，再弹出undefined。
上面3段代码比较容易理解，下面有些比较特殊点的
function myfunc(){
alert(“hello”);
}
myfunc();//这里调用myfunc，输出yeah而不是hello
function myfunc(){
alert(“yeah”);
}
myfunc();//这里调用myfunc，当然输出yeah
按理说，两个签名完全相同的函数，在其他编程语言中应该是非法的。但在JavaScript中，这没错。不
过，程序运行之后却发现一个奇怪的现象：两次调用都只是最后那个函数里输出的值！显然第一个函数
没有起到任何作用。这又是为什么呢？
原来，JavaScript执行引擎并非一行一行地分析和执行程序，而是一段一段地分析执行的。而且，
在同一段程序的分析执行中，定义式的函数语句会被提取出来优先执行。函数定义执行完之后，才会按
顺序执行其他语句代码。也就是说，在第一次调用myfunc之前，第一个函数语句定义的代码逻辑，已被
第二个函数定义语句覆盖了。所以，两次都调用都是执行最后一个函数逻辑了。
如果把这个JavaScript代码分成两段，例如将它们写在一个html中，并用<script/>标签将其分成这样的
两块：
<script>
function myfunc(){
alert(“hello”);
}
myfunc();//这里调用myfunc，输出hello
</script>
<script>
function myfunc(){
alert(“yeah”);
}
myfunc();//这里调用myfunc，输出yeah
</script>
这时，输出才是各自按顺序来的，也证明了JavaScript的确是一段段地执行的。
上面是两个相同名字的function对象，如果是一个变量和一个function对象拥有相同的名字是什么情况
呢？
<script type=”text/javascript”>
/*在预编译过程中func是window环境下的活动对象中的一个属性，值是一个函数，覆盖了undefined值*/
alert(func); //function func
var func = “this is a variable”
function func(){
alert(“hello!”)
}
上面第一行显示出来的结果是：
function func(){
alert(“this is a function”);
}
在预编译的情况下，它覆盖了第一个变量func
但是如果再添加两行代码，像这样：
alert(func);
var func = “this is a variable”;
function func(){
alert(“this is a function”);
}
alert(func);
alert(func());
最后2个alert的结果又不同了，第一个alert显示的是变量func的值，第二个alert出错；
这2个结果的解释参考的网站没有给出具体的解释，其中有指明说出是在执行过程中遇到了var重新赋值为”this is a variable”，此时变量func覆盖了func方法，所以func方法已不存在。
还有一个情况，看下面的代码
alert(a);//undefined
a();//出错
var a = function(){
alert(“aa”);
}
a();//aa
alert(tt);//function tt(){alert(‘tt’);}
tt();//tt
function tt(){alert(‘tt’);}
上面的代码中根据个人理解，用var定义变量并赋值一个function方法，和用function直接定义function
方法在预编译过程中显式出不同的结果，其中用var定义的a在预编译的时候只是分配了空间但不没有赋
值，所以第一个结果为undefined，第二个方法，由于var变量a在预编译时只被声明，并未赋值，故出现
错误提示，至于tt方法，应该比较好理解了
 
var name = “hong”;
function func(){
/*首先，在func环境内先把name赋值为undefined，然后在执行过程中先寻找func环境下的活动对象的name属性，此时之前已经预编译值为undefined，所以输出是undefined，而不是hong*/
alert(name); //undefined
var name = “JSF”;
alert(name); //JSF
}
func();
alert(name); //hong，此处调用的是全局对象name，func里面的name是局部变量
 
1.求y和z的值是多少？
<script type=”text/javascript”>
var x = 1;
var y = 0;
var z = 0;
function add(n){n=n+1;}
y = add(x);
function add(n){n=n+3;}
z = add(x);
</script>
都为undefined，因为没有返回值。
 
11.写出程序运行的结果？
for(i=0, j=0; i<10, j<6; i++, j++){
k = i + j;
}
结果：10（小心陷阱,i<10, j<6这个是条件,必须都满足才会继续执行，j>=6时整个for就不执行了，不会继续执行i）