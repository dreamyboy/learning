1、把方法写在原型中比写在构造函数中消耗的内存更小，因为在内存中一个类的原型只有一个，写在原型中的行为可以被所有实例共享，实例化的时候并不会在实例的内存中再复制一份
而写在类中的方法，实例化的时候会在每个实例中再复制一份，所以消耗的内存更高
所以没有特殊原因，我们一般把属性写到类中，而行为写到原型中
2、构造函数中定义的属性和方法要比原型中定义的属性和方法的优先级高，如果定义了同名称的属性和方法，构造函数中的将会覆盖原型中的
代码如下：
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>无标题文档</title>
</head>
<body>
<script type="text/javascript">
//把方法写在原型中比写在构造函数中消耗的内存更小，因为在内存中一个类的原型只有一个，写在原型中的行为可以被所有实例共享，实例化的时候并不会在实例的内存中再复制一份
//而写在类中的方法，实例化的时候会在每个实例中再复制一份，所以消耗的内存更高
//所以没有特殊原因，我们一般把属性写到类中，而行为写到原型中
function Abc(name){
    this.name=name;    //构造函数中定义的属性和方法要比原型中定义的属性和方法的优先级高，如果定义了同名称的属性和方法，构造函数中的将会覆盖原型中的，所以下面的x.sya()弹出的是“my name is xudeming”，如果把这句去掉，弹出的就是“my name is xx”;
    //方法的优先级亦是如此
    /*this.say=function(){  
        alert(1);    
    }*/
}
Abc.prototype={
    name:"xx",
    say:function(){
        alert("my name is "+this.name);    
    }
}
var x=new Abc("xudeming");
x.say()
</script>
</body>
</html>